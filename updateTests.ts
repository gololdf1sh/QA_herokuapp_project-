const fs = require('fs');
const path = require('path');

const testsPath = path.join(__dirname, 'tests'); // –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∑ —Ç–µ—Å—Ç–∞–º–∏

// –§—É–Ω–∫—Ü—ñ—è, —â–æ –¥–æ–¥–∞—î test.step() –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ö –¥—ñ–π
function wrapWithTestStep(content: string): string {
    return content.replace(
        /(?<!test\.step\([^)]*?)\b(await\s+[\w.]+\.(goto|click|fill|expect)[^;\n]+;)/g,
        "await test.step('Some action', async () => { $1 });"
    );
}

// –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
function processTestFiles(dir: string) {
    fs.readdirSync(dir).forEach((file: string) => {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);

        if (stat.isDirectory()) {
            processTestFiles(filePath); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –≤–∏–∫–ª–∏–∫ –¥–ª—è –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –ø–∞–ø–æ–∫
        } else if (file.endsWith('.spec.ts')) {
            let content = fs.readFileSync(filePath, 'utf8');

            if (!content.includes('test.step(')) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —î test.step()
                const updatedContent = wrapWithTestStep(content);
                fs.writeFileSync(filePath, updatedContent, 'utf8');
                console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ test.step —É —Ñ–∞–π–ª—ñ: ${filePath}`);
            } else {
                console.log(`‚è≠ ${filePath} - test.step –≤–∂–µ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`);
            }
        }
    });
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤
processTestFiles(testsPath);
console.log('üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ test.step()!');
