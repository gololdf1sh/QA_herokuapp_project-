import { Page, BrowserContext, expect } from '@playwright/test';

/**
 * –ö–ª–∞—Å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–æ—é A/B Test
 */
export class AbTestPage {
    page: Page; // –û–±'—î–∫—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Playwright
    private headingLocator = 'h3'; // –õ–æ–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª–∞—Å—É AbTestPage
     * @param page - –æ–±'—î–∫—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Playwright
     */
    constructor(page: Page) {
        this.page = page; // –ü—Ä–∏—Å–≤–æ—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É, –∑ —è–∫–æ—é –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –∫–ª–∞—Å
    }

    /**
     * –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É A/B Test
     */
    async goto() {
        await this.page.goto('/abtest');
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ h3 –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
     * @returns —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ (—Ç–∏–ø—É string)
     */
    async getHeadingText(): Promise<string> {
        return this.page.locator(this.headingLocator).textContent();
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É —Ç–∞ –∫—É–∫—ñ–≤
     * @param context - –æ–±'—î–∫—Ç BrowserContext –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫—É–∫–∞–º–∏
     * @param attempts - –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10)
     */
    async checkHeadlineWithCacheClear(context: BrowserContext, attempts: number = 10) {
        const firstHeading = await this.getHeadingText(); // –ó—á–∏—Ç—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        console.log(`üìù First headline: ${firstHeading}`);

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
        for (let i = 0; i < attempts; i++) {
            console.log(`üîÑ Attempt ${i + 1}: Clearing cache and reloading...`);

            // –û—á–∏—â–µ–Ω–Ω—è –∫—É–∫—ñ–≤ –±—Ä–∞—É–∑–µ—Ä–∞
            await context.clearCookies();

            // –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ API caches
            await this.page.evaluate(() =>
                caches.keys().then(keys => keys.forEach(key => caches.delete(key)))
            );

            // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —â–æ–± –ø—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–µ—à—É–≤–∞–Ω–Ω—è
            await this.page.setExtraHTTPHeaders({
                'Cache-Control': 'no-cache, no-store, must-revalidate'
            });

            // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            await this.page.reload();

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –Ω–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —î null
            const newHeading = await this.getHeadingText();
            expect(newHeading).not.toBeNull();
        }
    }
}
