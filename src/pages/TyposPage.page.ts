import { expect, Page, Locator } from '@playwright/test';

export class TyposPage {
    readonly page: Page;
    readonly paragraphLocator: Locator;

    constructor(page: Page) {
        this.page = page;
        this.paragraphLocator = page.locator('div.example p:nth-child(2)');
    }

    // –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    async goto() {
        await this.page.goto('https://the-internet.herokuapp.com/typos');
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑ –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É
    async getSecondParagraphText(): Promise<string> {
        return await this.paragraphLocator.innerText();
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –∑ –∫—ñ–ª—å–∫–æ–º–∞ —Å–ø—Ä–æ–±–∞–º–∏
     * @param retries - –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
     */
    async waitForCorrectText(retries: number = 10): Promise<{ success: boolean; lastText: string }> {
        const expectedText = `Sometimes you'll see a typo, other times you won't.`;
        let lastText = '';

        for (let i = 1; i <= retries; i++) {
            lastText = await this.getSecondParagraphText();

            console.log(`üìù Attempt ${i}: "${lastText}"`);

            if (lastText.trim() === expectedText) {
                console.log(`‚úÖ Correct text found on attempt ${i}`);
                return { success: true, lastText };
            }

            // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –Ω–æ–≤–æ—ó —Å–ø—Ä–æ–±–∏
            await this.page.reload();
        }

        console.warn(`‚ùå Text did not match after ${retries} attempts. Last attempt: "${lastText}"`);
        return { success: false, lastText };
    }
}
